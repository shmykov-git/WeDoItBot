История проекта

Этот проект был начат в рамках участия в хакатоне Цифровой прорыв 2020 (https://leadersofdigital.ru/)
Мне было интересно познакомится с форматом хакатона, понять, как это разрабатывать софт в течение ограниченного времени
Вместе с командой мы решили, что будем делать бота, который будет решать требуемую задачу, а именно: 
организация неформального общения во время собственно конференции
Забегая вперед скажу, что он не стал лучшим решением. Однако саму идею реализовать платформу для запуска мессенджер ботов
я не оставил, а довел ее до определенной логической точки.
Сейчас платформа позволяет запускать несколько телеграм ботов, которые сконфигурированы json файлом.
Идея платформы: UI может быть простым и функциональным
Достаточно написать файл конфигурации и можно получить простого, но часто вполне полноценного бота.
Для более сложны бизнес задач, требуется доработка платформы. Но уже сейчас на ней работают несколько телеграм ботов.

Например: https://t.me/WeDoItHakatonBot 
Конфигурационный файла бота: см. wedoit.json в проекте или https://github.com/shmykov-git/WeDoItBot/blob/master/Starter/Bots/weDoIt.json
(в настоящий момент telegram может потребовать аутентификацию, возможно связано с тем, что проект открыт и все ключи ботов открыты, 
т.е. возможен запуск из любых источников. в любом случае это является пока проблемой и пока не решалась)


Для работодателя (платформа, как портфолио)

Композиция сборок: 
  Suit - общая сборка (общие методы, расширения, аспекты и т.д.)
  Bot - сборка для единой логики работы всех ботов
  Bot.Test - юнит тесты основной логики
  TelegramBot - сборка для логики телеграм ботов
  Starter приложение для запуска

Технологии проектирования:
  SOLID - в целом код отвечает данным принципам разработки ПО
  IoC - инверсия зависимостей с использованием общего контейнера
  AOP - аспектноориентированное программирование (для логов есть аспекты)
  Логирование - можно выбирать способ логирования (NLog или консоль или что-то свое)

Патерны проектирования:
  Visitor - это центральный паттерн, на котором основана основная логика работы платформы (например см.: TelegramBotMapVisitor)

Развертывание:
  Docker использован для контейнеризации приложения
  Docker-compose для объединения и развертывания контейнеров
  Деплой в настоящий момент выполнен локально на компьютере (поект является личным, пока не требует много ресурсов)
    выполняется запуском макроса