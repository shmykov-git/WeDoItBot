{
  "Rooms": [
    {
      "Id": "start",
      "AutoGo": "service"
    },
    {
      "Id": "service",
      "Menu": "Выберите вопрос",
      "Items": [
        {
          "Button": "🎩 Что такое SOLID?",
          "Go": "solid"
        },
        {
          "Button": "🎩 Что такое IoC?",
          "Go": "IoC"
        },
        {
          "Button": "🎩 Что такое GRASP?",
          "Go": "GRASP"
        }
      ]
    },
    {
      "Id": "solid",
      "Menu": "Это набор принципов разработки ПО",
      "Items": [
        {
          "Button": "Ⓢ",
          "Go": "solid_s"
        },
        {
          "Button": "Ⓞ",
          "Go": "solid_o"
        },
        {
          "Button": "Ⓛ",
          "Go": "solid_l"
        },
        {
          "Button": "Ⓘ",
          "Go": "solid_i"
        },
        {
          "Button": "Ⓓ",
          "Go": "solid_d"
        },
        {
          "Button": "◄",
          "Go": "service"
        }
      ],
      "ColumnsCount": "6"
    },
    {
      "Id": "solid_s",
      "Say": "Single responsibility",
      "Go": "solid"
    },
    {
      "Id": "solid_o",
      "Say": "Open–closed",
      "Go": "solid"
    },
    {
      "Id": "solid_l",
      "Say": "Liskov substitution",
      "Go": "solid"
    },
    {
      "Id": "solid_i",
      "Say": "Interface segregation",
      "Go": "solid"
    },
    {
      "Id": "solid_d",
      "Say": "Dependency inversion",
      "Go": "solid"
    },
    {
      "Id": "IoC",
      "Menu": "Это принцип инверсии управления. Делегирование контроля выполнения кода отдельному фреймворку",
      "Items": [
        {
          "Button": "Ⓣ Табличка",
          "Go": "IoC_table"
        },
        {
          "Button": "☕ Разъяснялка",
          "Go": "IoC_text"
        },
        {
          "Button": "◄",
          "Go": "service"
        }
      ],
      "ColumnsCount": "3" 
    },
    {
      "Id": "IoC_table",
      "Say": "",
      "Go": "IoC"
    },
    {
      "Id": "IoC_text",
      "Say": "- Как бы нам сделать инверсию зависимостей?\n- А давайте сделаем инверсию управления.\n- А как?\n- Сделаем сервис, который сам будет создавать все объекты так, как ему нужно и будет их вставлять в каждую сущность, которая этого требует.\n- Так это получается инжекция зависимостей что ли?\n- Точно! Сервис инжектирует зависимости самостоятельно!\n- Погодите, но мы же делаем инверсию зависимостей?\n- Да!! Как только мы станем инжектить зависимости, то пропадёт зависимость от базовых сущностей в верхних модулях, это и называется инверсией зависимостей!",
      "Go": "IoC"
    },
    {
      "Id": "GRASP",
      "Menu": "GRASP (general responsibility assignment software patterns)\nКак правильно наделять классы той или иной ответственностью? - вот об этом данные принципы проектирования",
      "Items": [
        {
          "Button": "🔸 Information Expert",
          "Go": "GRASP_InformationExpert"
        },
        {
          "Button": "🔸 Creator",
          "Go": "GRASP_Creator"
        },
        {
          "Button": "🔸 Controller",
          "Go": "GRASP_Controller"
        },
        {
          "Button": "🔸 Low Coupling",
          "Go": "GRASP_LowCoupling"
        },
        {
          "Button": "🔸 High Cohesion",
          "Go": "GRASP_HighCohesion"
        },
        {
          "Button": "🔸 Polymorphism",
          "Go": "GRASP_Polymorphism"
        },
        {
          "Button": "🔸 Pure Fabrication",
          "Go": "GRASP_PureFabrication"
        },
        {
          "Button": "🔸 Indirection",
          "Go": "GRASP_Indirection"
        },
        {
          "Button": "🔸 Protected Variations",
          "Go": "GRASP_ProtectedVariations"
        },
        {
          "Button": "◄",
          "Go": "service"
        }
      ],
      "ColumnsCount": "2"
    },
    {
      "Id": "GRASP_InformationExpert",
      "Say": "Information Expert\nИменно данный класс получил все требуемые данные - вот он и должен содержать методы работы с этими данными",
      "Go": "GRASP"
    },
    {
      "Id": "GRASP_Creator",
      "Say": "Creator\nПорождающий патерн. Скрывает сложность создания объекта",
      "Go": "GRASP"
    },
    {
      "Id": "GRASP_Controller",
      "Say": "Controller\nРеализует функционал приема внешних запросов, делегирует их выполнение другим модулям",
      "Go": "GRASP"
    },
    {
      "Id": "GRASP_LowCoupling",
      "Say": "Low Coupling\nКласс реализован таким способом, что изменение внешних модулей (классов) слабо влияет или вовсе не влияет на его реализацию, т.е. класс не требуется переписывать при внешних изменениях",
      "Go": "GRASP"
    },
    {
      "Id": "GRASP_HighCohesion",
      "Say": "High Cohesion\nЭто аналог принципа single resposibility (SOLID) класса. Только немного в более широком смысле. Это оценка проекта в целом, на сколько каждый из классов завязан на выполнении конкретной специфичной функции. Чем выше связанность, тем понятнее система",
      "Go": "GRASP"
    },
    {
      "Id": "GRASP_Polymorphism",
      "Say": "Polymorphism\nСпособность системы к сложной адаптации. Много внешних факторов, они меняются и нужно поддреживать данную систему в актуальном незапутанном виде (Отчеты в Excel соответствуют этому принципы. Любой отчет делается на 4-8 часов, потому что заложена сложная адаптация, или данная платформа для ботов - 3 часа и новый бот)",
      "Go": "GRASP"
    },
    {
      "Id": "GRASP_PureFabrication",
      "Say": "Pure Fabrication\nПозволяет в сложных случаях \"придумать\" абстракцию которой может не быть в реальности, наделить ее частью функций. Тем самым разгрузить какие-то перегруженные классы",
      "Go": "GRASP"
    },
    {
      "Id": "GRASP_Indirection",
      "Say": "Indirection\nПосредник. Есть класс отвечающий за промежуточную логику работы других классов.\nНапример Model-View-Controller - тут контроллер позволяет модели и представлению не знать ничего друг о друге.\nМодель занята только своей внутренней логикой - что происходит в системе.\nПредставление - умеет отображать любые данные, которые ей предоставят.\nКонтроллер берет конктретную модель, делает адаптацию данных под конкретное представление.\nВот этот вот функционал посредника в данной системе патернов называется Indirection.",
      "Go": "GRASP"
    },
    {
      "Id": "GRASP_ProtectedVariations",
      "Say": "Protected Variations\nВсе возможные изменения системы определяются через публичный интерфейс (В отчетах есть интерфейс контекста, который определяет, что именно можно делать при создании отчета) - это протекция системы отчетов от некорректных изменений",
      "Go": "GRASP"
    }
  ]
}